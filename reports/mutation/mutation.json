{"files":{"src/array/__tests__/arraylable.test.ts":{"language":"typescript","mutants":[{"id":"0","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":22,"line":4},"start":{"column":10,"line":4}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":13},"start":{"column":30,"line":4}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":5},"start":{"column":8,"line":5}}},{"id":"3","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":6},"start":{"column":8,"line":6}}},{"id":"6","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":9},"start":{"column":8,"line":9}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["73"],"location":{"end":{"column":4,"line":12},"start":{"column":63,"line":9}}},{"id":"4","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["72"],"location":{"end":{"column":4,"line":8},"start":{"column":55,"line":6}}},{"id":"8","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected [] to strictly equal [ 'Stryker was here' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["73"],"coveredBy":["73"],"location":{"end":{"column":44,"line":11},"start":{"column":42,"line":11}}},{"id":"5","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected [] to strictly equal [ 'Stryker was here' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["72"],"coveredBy":["72"],"location":{"end":{"column":46,"line":7},"start":{"column":44,"line":7}}}],"source":"import { expect,  describe, test } from 'vitest'\nimport { arraylable } from '../arraylable'\n\ndescribe('arraylable', () => {\n  test('Empty test', () => {})\n  test('Should be empty [] when imput is null', () => {\n    expect(arraylable(null)).toStrictEqual([])\n  })\n  test('should be empty when imput is an empty object', () => {\n    // @ts-expect-error - we are testing this\n    expect(arraylable({})).toStrictEqual([])\n  })\n})\n/*\ntest.each([\n  { expected: [], label: 'null', tested: null },\n  { expected: [], label: 'undefined', tested: undefined },\n  { expected: [1, 2, 3], label: '[1, 2, 3]', tested: [1, 2, 3] },\n  { expected: [], label: '{ foo: 1 }', tested: { foo: 1 } }\n])('arraylable($label) should be $expected', ({ tested, expected }) => {\n  // @ts-expect-error - we are testing the case where dataSource is invalid\n  expect(arraylable(tested)).toStrictEqual(expected)\n})\n */\n"},"src/array/__tests__/getById.test.ts":{"language":"typescript","mutants":[{"id":"9","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":4},"start":{"column":10,"line":4}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":34},"start":{"column":27,"line":4}}},{"id":"11","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":48,"line":5},"start":{"column":6,"line":5}}},{"id":"21","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":54,"line":11},"start":{"column":6,"line":11}}},{"id":"29","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":58,"line":16},"start":{"column":6,"line":16}}},{"id":"34","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":62,"line":23},"start":{"column":6,"line":23}}},{"id":"37","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":57,"line":31},"start":{"column":6,"line":31}}},{"id":"13","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected undefined to strictly equal { id: '2' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":50,"line":6},"start":{"column":24,"line":6}}},{"id":"12","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["31"],"location":{"end":{"column":4,"line":9},"start":{"column":56,"line":5}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["31"],"location":{"end":{"column":36,"line":6},"start":{"column":25,"line":6}}},{"id":"15","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["31"],"location":{"end":{"column":34,"line":6},"start":{"column":31,"line":6}}},{"id":"16","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to strictly equal { id: '2' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":49,"line":6},"start":{"column":38,"line":6}}},{"id":"17","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected undefined to strictly equal { id: '2' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":47,"line":6},"start":{"column":44,"line":6}}},{"id":"18","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected undefined to strictly equal { id: '2' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":43,"line":7},"start":{"column":40,"line":7}}},{"id":"19","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected { id: '2' } to strictly equal {}","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":45,"line":8},"start":{"column":34,"line":8}}},{"id":"23","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":50,"line":12},"start":{"column":24,"line":12}}},{"id":"22","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":4,"line":14},"start":{"column":62,"line":11}}},{"id":"24","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":36,"line":12},"start":{"column":25,"line":12}}},{"id":"20","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected { id: '2' } to strictly equal { id: '' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":43,"line":8},"start":{"column":40,"line":8}}},{"id":"25","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":34,"line":12},"start":{"column":31,"line":12}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":49,"line":12},"start":{"column":38,"line":12}}},{"id":"27","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":47,"line":12},"start":{"column":44,"line":12}}},{"id":"28","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["32"],"location":{"end":{"column":35,"line":13},"start":{"column":32,"line":13}}},{"id":"30","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":4,"line":21},"start":{"column":66,"line":16}}},{"id":"31","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":26,"line":17},"start":{"column":24,"line":17}}},{"id":"32","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":43,"line":18},"start":{"column":40,"line":18}}},{"id":"33","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":27,"line":19},"start":{"column":17,"line":19}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["34"],"location":{"end":{"column":4,"line":29},"start":{"column":70,"line":23}}},{"id":"38","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["35"],"location":{"end":{"column":4,"line":33},"start":{"column":65,"line":31}}},{"id":"36","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["34"],"location":{"end":{"column":43,"line":27},"start":{"column":40,"line":27}}}],"source":"import { describe, expect, it } from 'vitest'\nimport { getById } from '../getById'\n\ndescribe('getById', () => {\n  it('should return the item with the given id', () => {\n    const dataSource = [{ id: '1' }, { id: '2' }]\n    const actual = getById(dataSource, '2')\n    expect(actual).toStrictEqual({ id: '2' })\n  })\n\n  it('should return undefined if the id is not found', () => {\n    const dataSource = [{ id: '1' }, { id: '2' }]\n    expect(getById(dataSource, '3')).toBeUndefined()\n  })\n\n  it('should return undefined if the dataSource is empty', () => {\n    const dataSource = []\n    const actual = getById(dataSource, '1')\n    console.log('actual: ', actual )\n    expect(actual).toBe(undefined)\n  })\n\n  it('should return undefined if the dataSource is undefined', () => {\n    const dataSource = undefined\n    // @ts-expect-error - we are testing the case where dataSource is null\n\n    const actual = getById(dataSource, '1')\n    expect(actual).toBeUndefined()\n  })\n\n  it('should return undefined if the dataSource is null', () => {\n    const dataSource = null\n  })\n})\n"},"src/array/__tests__/getIndexById.test.ts":{"language":"typescript","mutants":[{"id":"39","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":24,"line":4},"start":{"column":10,"line":4}}},{"id":"40","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":40},"start":{"column":32,"line":4}}},{"id":"41","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":61,"line":5},"start":{"column":6,"line":5}}},{"id":"49","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":10},"start":{"column":6,"line":10}}},{"id":"58","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":71,"line":15},"start":{"column":6,"line":15}}},{"id":"67","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":51,"line":24},"start":{"column":6,"line":24}}},{"id":"72","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":29},"start":{"column":6,"line":29}}},{"id":"76","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":50,"line":35},"start":{"column":6,"line":35}}},{"id":"42","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["0"],"location":{"end":{"column":4,"line":8},"start":{"column":69,"line":5}}},{"id":"43","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":59,"line":6},"start":{"column":33,"line":6}}},{"id":"45","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["0"],"location":{"end":{"column":43,"line":6},"start":{"column":40,"line":6}}},{"id":"44","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["0"],"location":{"end":{"column":45,"line":6},"start":{"column":34,"line":6}}},{"id":"46","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":58,"line":6},"start":{"column":47,"line":6}}},{"id":"47","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":56,"line":6},"start":{"column":53,"line":6}}},{"id":"50","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":4,"line":13},"start":{"column":55,"line":10}}},{"id":"48","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":64,"line":6},"start":{"column":61,"line":6}}},{"id":"51","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":59,"line":11},"start":{"column":33,"line":11}}},{"id":"52","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":45,"line":11},"start":{"column":34,"line":11}}},{"id":"53","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":43,"line":11},"start":{"column":40,"line":11}}},{"id":"54","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":58,"line":11},"start":{"column":47,"line":11}}},{"id":"55","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":56,"line":11},"start":{"column":53,"line":11}}},{"id":"56","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["1"],"location":{"end":{"column":64,"line":11},"start":{"column":61,"line":11}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":4,"line":22},"start":{"column":79,"line":15}}},{"id":"57","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":27,"line":12},"start":{"column":25,"line":12}}},{"id":"60","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":50,"line":18},"start":{"column":7,"line":18}}},{"id":"61","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":19,"line":18},"start":{"column":8,"line":18}}},{"id":"62","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":17,"line":18},"start":{"column":14,"line":18}}},{"id":"63","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":32,"line":18},"start":{"column":21,"line":18}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":30,"line":18},"start":{"column":27,"line":18}}},{"id":"65","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["2"],"location":{"end":{"column":10,"line":19},"start":{"column":7,"line":19}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["3"],"location":{"end":{"column":4,"line":27},"start":{"column":59,"line":24}}},{"id":"66","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2"],"location":{"end":{"column":27,"line":21},"start":{"column":25,"line":21}}},{"id":"69","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["3"],"location":{"end":{"column":35,"line":25},"start":{"column":33,"line":25}}},{"id":"70","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["3"],"location":{"end":{"column":40,"line":25},"start":{"column":37,"line":25}}},{"id":"74","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["4"],"location":{"end":{"column":47,"line":31},"start":{"column":44,"line":31}}},{"id":"73","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["4"],"location":{"end":{"column":4,"line":33},"start":{"column":63,"line":29}}},{"id":"71","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":27,"line":26},"start":{"column":25,"line":26}}},{"id":"75","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":27,"line":32},"start":{"column":25,"line":32}}},{"id":"78","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["5"],"location":{"end":{"column":42,"line":37},"start":{"column":39,"line":37}}},{"id":"77","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["5"],"location":{"end":{"column":4,"line":39},"start":{"column":58,"line":35}}},{"id":"79","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"expected -1 to be 1 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":27,"line":38},"start":{"column":25,"line":38}}}],"source":"import { describe, expect, it } from 'vitest'\nimport { getIndexById } from '../getIndexById'\n\ndescribe('getIndexById', () => {\n  it('should return the index of the item with the given id', () => {\n    const actual = getIndexById([{ id: '1' }, { id: '2' }], '2')\n    expect(actual).toBe(1)\n  })\n\n  it('should return -1 if the id is not found', () => {\n    const actual = getIndexById([{ id: '1' }, { id: '2' }], '3')\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the id is not found and some element is nil', () => {\n    const actual = getIndexById(\n      // @ts-expect-error - we are testing the case where dataSource contains nil\n      [{ id: '1' }, { id: '2' }, null, undefined],\n      '3',\n    )\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the dataSource is empty', () => {\n    const actual = getIndexById([], '1')\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the dataSource is undefined', () => {\n    // @ts-expect-error - we are testing the case where dataSource is undefined\n    const actual = getIndexById(undefined, '1')\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the dataSource is null', () => {\n    // @ts-expect-error - we are testing the case where dataSource is null\n    const actual = getIndexById(null, '1')\n    expect(actual).toBe(-1)\n  })\n})\n"},"src/array/__tests__/sum.test.ts":{"language":"typescript","mutants":[{"id":"80","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":17,"line":4},"start":{"column":10,"line":4}}},{"id":"81","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":9},"start":{"column":25,"line":4}}},{"id":"82","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":36,"line":5},"start":{"column":6,"line":5}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["84"],"location":{"end":{"column":4,"line":8},"start":{"column":44,"line":5}}},{"id":"84","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected +0 to be 6 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["84"],"coveredBy":["84"],"location":{"end":{"column":33,"line":6},"start":{"column":24,"line":6}}}],"source":"import { describe, expect, it } from 'vitest'\nimport { sum } from '../sum'\n\ndescribe('sumBy', () => {\n  it('should sum every single item', () => {\n    const actual = sum([1, 2, 3])\n    expect(actual).toBe(6)\n  })\n})\n"},"src/array/__tests__/sumBy.test.ts":{"language":"typescript","mutants":[{"id":"85","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":17,"line":4},"start":{"column":10,"line":4}}},{"id":"86","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":12},"start":{"column":25,"line":4}}},{"id":"87","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":57,"line":5},"start":{"column":6,"line":5}}},{"id":"88","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["81"],"location":{"end":{"column":4,"line":11},"start":{"column":65,"line":5}}},{"id":"89","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected +0 to be 6 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81"],"location":{"end":{"column":49,"line":7},"start":{"column":7,"line":7}}},{"id":"90","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to be 6 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81"],"location":{"end":{"column":20,"line":7},"start":{"column":8,"line":7}}},{"id":"92","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to be 6 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81"],"location":{"end":{"column":48,"line":7},"start":{"column":36,"line":7}}},{"id":"91","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected NaN to be 6 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81"],"location":{"end":{"column":34,"line":7},"start":{"column":22,"line":7}}},{"id":"93","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected NaN to be 6 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81"],"location":{"end":{"column":27,"line":8},"start":{"column":7,"line":8}}}],"source":"import { describe, expect, it } from 'vitest'\nimport { sumBy } from '../sumBy'\n\ndescribe('sumBy', () => {\n  it('should sum every single item by the given accesor', () => {\n    const actual = sumBy(\n      [{ value: 1 }, { value: 2 }, { value: 3 }],\n      (item) => item.value\n    )\n    expect(actual).toBe(6)\n  })\n})\n"},"src/check/__tests__/IsObject.test.ts":{"language":"typescript","mutants":[{"id":"94","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":15},"start":{"column":11,"line":4}}},{"id":"95","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":5},"start":{"column":3,"line":5}}},{"id":"96","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":5},"start":{"column":15,"line":5}}},{"id":"97","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":5},"start":{"column":28,"line":5}}},{"id":"98","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":6},"start":{"column":3,"line":6}}},{"id":"99","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":6},"start":{"column":15,"line":6}}},{"id":"100","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":6},"start":{"column":28,"line":6}}},{"id":"101","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":44,"line":6},"start":{"column":42,"line":6}}},{"id":"102","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":54,"line":7},"start":{"column":3,"line":7}}},{"id":"103","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":7},"start":{"column":15,"line":7}}},{"id":"104","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":36,"line":7},"start":{"column":28,"line":7}}},{"id":"105","mutatorName":"Regex","replacement":"/d/gu","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":52,"line":7},"start":{"column":46,"line":7}}},{"id":"106","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":62,"line":8},"start":{"column":3,"line":8}}},{"id":"107","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":8},"start":{"column":15,"line":8}}},{"id":"108","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":40,"line":8},"start":{"column":28,"line":8}}},{"id":"109","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":63,"line":9},"start":{"column":3,"line":9}}},{"id":"110","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":9},"start":{"column":15,"line":9}}},{"id":"111","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":9},"start":{"column":29,"line":9}}},{"id":"112","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":59,"line":10},"start":{"column":3,"line":10}}},{"id":"113","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":10},"start":{"column":15,"line":10}}},{"id":"114","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":10},"start":{"column":29,"line":10}}},{"id":"115","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":51,"line":11},"start":{"column":3,"line":11}}},{"id":"116","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":11},"start":{"column":15,"line":11}}},{"id":"117","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":35,"line":11},"start":{"column":29,"line":11}}},{"id":"118","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":61,"line":12},"start":{"column":3,"line":12}}},{"id":"119","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":12},"start":{"column":15,"line":12}}},{"id":"120","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":40,"line":12},"start":{"column":29,"line":12}}},{"id":"121","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":13},"start":{"column":3,"line":13}}},{"id":"122","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":13},"start":{"column":15,"line":13}}},{"id":"123","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":13},"start":{"column":29,"line":13}}},{"id":"124","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":14},"start":{"column":3,"line":14}}},{"id":"125","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":14},"start":{"column":15,"line":14}}},{"id":"126","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":14},"start":{"column":29,"line":14}}},{"id":"127","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":14},"start":{"column":43,"line":14}}},{"id":"128","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":42,"line":15},"start":{"column":4,"line":15}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["36","37","38","39","40","41","42","43","44","45"],"location":{"end":{"column":2,"line":17},"start":{"column":70,"line":15}}}],"source":"import { expect, test } from 'vitest'\nimport { isObject } from '../isObject'\n\ntest.each([\n  { expected: true, label: '{}', tested: {} },\n  { expected: true, label: '[]', tested: [] },\n  { expected: true, label: '/d+/gu', tested: /d+/gu },\n  { expected: true, label: 'new Date()', tested: new Date() },\n  { expected: false, label: `Symbol('')`, tested: Symbol('') },\n  { expected: false, label: '() => {}', tested: () => {} },\n  { expected: false, label: 'null', tested: null },\n  { expected: false, label: 'undefined', tested: undefined },\n  { expected: false, label: '1', tested: 1 },\n  { expected: false, label: `''`, tested: '' },\n])('isObject($label) should be $expected', ({ tested, expected }) => {\n  expect(isObject(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isEmpty.test.ts":{"language":"typescript","mutants":[{"id":"130","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":19},"start":{"column":11,"line":4}}},{"id":"131","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":48,"line":5},"start":{"column":3,"line":5}}},{"id":"132","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":5},"start":{"column":15,"line":5}}},{"id":"133","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":5},"start":{"column":28,"line":5}}},{"id":"134","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":5},"start":{"column":42,"line":5}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":48,"line":6},"start":{"column":3,"line":6}}},{"id":"136","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":6},"start":{"column":15,"line":6}}},{"id":"137","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":6},"start":{"column":28,"line":6}}},{"id":"138","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":6},"start":{"column":42,"line":6}}},{"id":"139","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":50,"line":7},"start":{"column":3,"line":7}}},{"id":"140","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":7},"start":{"column":15,"line":7}}},{"id":"141","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":34,"line":7},"start":{"column":28,"line":7}}},{"id":"142","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":60,"line":8},"start":{"column":3,"line":8}}},{"id":"143","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":8},"start":{"column":15,"line":8}}},{"id":"144","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":8},"start":{"column":28,"line":8}}},{"id":"145","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":9},"start":{"column":3,"line":9}}},{"id":"146","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":9},"start":{"column":15,"line":9}}},{"id":"147","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":9},"start":{"column":28,"line":9}}},{"id":"148","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":44,"line":9},"start":{"column":42,"line":9}}},{"id":"149","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":44,"line":10},"start":{"column":3,"line":10}}},{"id":"150","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":10},"start":{"column":15,"line":10}}},{"id":"151","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":31,"line":10},"start":{"column":28,"line":10}}},{"id":"152","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":44,"line":11},"start":{"column":3,"line":11}}},{"id":"153","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":11},"start":{"column":15,"line":11}}},{"id":"154","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":31,"line":11},"start":{"column":28,"line":11}}},{"id":"155","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":58,"line":12},"start":{"column":3,"line":12}}},{"id":"156","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":12},"start":{"column":15,"line":12}}},{"id":"157","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":38,"line":12},"start":{"column":28,"line":12}}},{"id":"158","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":56,"line":13},"start":{"column":3,"line":13}}},{"id":"159","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":13},"start":{"column":15,"line":13}}},{"id":"160","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":13},"start":{"column":28,"line":13}}},{"id":"161","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":54,"line":14},"start":{"column":3,"line":14}}},{"id":"162","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":14},"start":{"column":15,"line":14}}},{"id":"163","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":36,"line":14},"start":{"column":28,"line":14}}},{"id":"164","mutatorName":"Regex","replacement":"/d/gu","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":52,"line":14},"start":{"column":46,"line":14}}},{"id":"165","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":62,"line":15},"start":{"column":3,"line":15}}},{"id":"166","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":15},"start":{"column":15,"line":15}}},{"id":"167","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":40,"line":15},"start":{"column":28,"line":15}}},{"id":"168","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":62,"line":16},"start":{"column":3,"line":16}}},{"id":"169","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":16},"start":{"column":15,"line":16}}},{"id":"170","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":40,"line":16},"start":{"column":28,"line":16}}},{"id":"171","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":17},"start":{"column":3,"line":17}}},{"id":"172","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":17},"start":{"column":15,"line":17}}},{"id":"173","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":37,"line":17},"start":{"column":29,"line":17}}},{"id":"174","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":17},"start":{"column":47,"line":17}}},{"id":"175","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":74,"line":18},"start":{"column":3,"line":18}}},{"id":"176","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":18},"start":{"column":15,"line":18}}},{"id":"177","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":18},"start":{"column":29,"line":18}}},{"id":"178","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":19},"start":{"column":4,"line":19}}},{"id":"179","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["6","7","8","9","10","11","12","13","14","15","16","17","18","19"],"location":{"end":{"column":2,"line":21},"start":{"column":69,"line":19}}}],"source":"import { expect, test } from 'vitest'\nimport { isEmpty } from '../isEmpty'\n\ntest.each([\n  { expected: true, label: '{}', tested: '{}' },\n  { expected: true, label: '[]', tested: '[]' },\n  { expected: true, label: 'null', tested: null },\n  { expected: true, label: 'undefined', tested: undefined },\n  { expected: true, label: `''`, tested: '' },\n  { expected: true, label: '0', tested: 0 },\n  { expected: true, label: '1', tested: 1 },\n  { expected: true, label: '() => {}', tested: () => {} },\n  { expected: true, label: 'tested() {}', tested() {} },\n  { expected: true, label: '/d+/gu', tested: /d+/gu },\n  { expected: true, label: 'new Date()', tested: new Date() },\n  { expected: true, label: `Symbol('')`, tested: Symbol('') },\n  { expected: false, label: `[1, 2]`, tested: [1, 2] },\n  { expected: false, label: `{ foo: 1 }`, tested: { foo: 1 } as unknown }\n])('isEmpty($label) should be $expected', ({ tested, expected }) => {\n  expect(isEmpty(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isFunction.test.ts":{"language":"typescript","mutants":[{"id":"180","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":9},"start":{"column":11,"line":4}}},{"id":"181","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":59,"line":5},"start":{"column":3,"line":5}}},{"id":"182","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":5},"start":{"column":15,"line":5}}},{"id":"183","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":5},"start":{"column":28,"line":5}}},{"id":"184","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":6},"start":{"column":3,"line":6}}},{"id":"185","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":6},"start":{"column":15,"line":6}}},{"id":"186","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":6},"start":{"column":29,"line":6}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":6},"start":{"column":43,"line":6}}},{"id":"188","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":43,"line":7},"start":{"column":3,"line":7}}},{"id":"189","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":7},"start":{"column":15,"line":7}}},{"id":"190","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":8},"start":{"column":3,"line":8}}},{"id":"191","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":8},"start":{"column":15,"line":8}}},{"id":"192","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":8},"start":{"column":29,"line":8}}},{"id":"193","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":9},"start":{"column":4,"line":9}}},{"id":"194","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["74","75"],"location":{"end":{"column":2,"line":11},"start":{"column":73,"line":9}}}],"source":"import { expect, test } from 'vitest'\nimport { isFunction } from '../isFunction'\n\ntest.each([\n  { expected: true, label: ' () => {}', tested: () => {} },\n  { expected: false, label: '\"\"', tested: '' },\n  { expected: false, label: 2, tested: 2 },\n  { expected: false, label: '{}', tested: {} },\n])('isFunction(${label) should be $expected', ({ tested, expected }) => {\n  expect(isFunction(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isNullOrUndefined.test.ts":{"language":"typescript","mutants":[{"id":"195","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":12},"start":{"column":11,"line":4}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":5},"start":{"column":3,"line":5}}},{"id":"197","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":5},"start":{"column":15,"line":5}}},{"id":"198","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":5},"start":{"column":29,"line":5}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":6},"start":{"column":3,"line":6}}},{"id":"200","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":6},"start":{"column":15,"line":6}}},{"id":"201","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":6},"start":{"column":29,"line":6}}},{"id":"202","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":6},"start":{"column":43,"line":6}}},{"id":"203","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":51,"line":7},"start":{"column":3,"line":7}}},{"id":"204","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":7},"start":{"column":15,"line":7}}},{"id":"205","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":35,"line":7},"start":{"column":29,"line":7}}},{"id":"206","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":49,"line":7},"start":{"column":45,"line":7}}},{"id":"207","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":8},"start":{"column":3,"line":8}}},{"id":"208","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":8},"start":{"column":15,"line":8}}},{"id":"209","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":36,"line":8},"start":{"column":29,"line":8}}},{"id":"210","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":51,"line":8},"start":{"column":46,"line":8}}},{"id":"211","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":9},"start":{"column":3,"line":9}}},{"id":"212","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":9},"start":{"column":15,"line":9}}},{"id":"213","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":9},"start":{"column":29,"line":9}}},{"id":"214","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":50,"line":10},"start":{"column":3,"line":10}}},{"id":"215","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":10},"start":{"column":15,"line":10}}},{"id":"216","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":34,"line":10},"start":{"column":28,"line":10}}},{"id":"217","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":60,"line":11},"start":{"column":3,"line":11}}},{"id":"218","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":11},"start":{"column":15,"line":11}}},{"id":"219","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":11},"start":{"column":28,"line":11}}},{"id":"220","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":51,"line":12},"start":{"column":4,"line":12}}},{"id":"221","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":7,"coveredBy":["56","57","58","59","60","61","62"],"location":{"end":{"column":2,"line":14},"start":{"column":79,"line":12}}}],"source":"import { expect, test } from 'vitest'\nimport { isNullOrUndefined } from '../isNullOrUndefined'\n\ntest.each([\n  { expected: false, label: '{}', tested: {} },\n  { expected: false, label: '[]', tested: [] },\n  { expected: false, label: 'true', tested: true },\n  { expected: false, label: 'false', tested: false },\n  { expected: false, label: '1', tested: 1 },\n  { expected: true, label: 'null', tested: null },\n  { expected: true, label: 'undefined', tested: undefined },\n])('isNullOrUndefined($label) should be $expected', ({ tested, expected }) => {\n  expect(isNullOrUndefined(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isObjectLike.test.ts":{"language":"typescript","mutants":[{"id":"222","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":16},"start":{"column":11,"line":4}}},{"id":"223","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":5},"start":{"column":3,"line":5}}},{"id":"224","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":5},"start":{"column":15,"line":5}}},{"id":"225","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":5},"start":{"column":28,"line":5}}},{"id":"226","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":6},"start":{"column":3,"line":6}}},{"id":"227","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":6},"start":{"column":15,"line":6}}},{"id":"228","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":37,"line":6},"start":{"column":29,"line":6}}},{"id":"229","mutatorName":"Regex","replacement":"/d/gu","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":6},"start":{"column":47,"line":6}}},{"id":"230","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":63,"line":7},"start":{"column":3,"line":7}}},{"id":"231","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":7},"start":{"column":15,"line":7}}},{"id":"232","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":29,"line":7}}},{"id":"233","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":8},"start":{"column":3,"line":8}}},{"id":"234","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":8},"start":{"column":15,"line":8}}},{"id":"235","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":8},"start":{"column":29,"line":8}}},{"id":"236","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":8},"start":{"column":43,"line":8}}},{"id":"237","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":63,"line":9},"start":{"column":3,"line":9}}},{"id":"238","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":9},"start":{"column":15,"line":9}}},{"id":"239","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":9},"start":{"column":29,"line":9}}},{"id":"240","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":59,"line":10},"start":{"column":3,"line":10}}},{"id":"241","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":10},"start":{"column":15,"line":10}}},{"id":"242","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":10},"start":{"column":29,"line":10}}},{"id":"243","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":57,"line":11},"start":{"column":3,"line":11}}},{"id":"244","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":11},"start":{"column":15,"line":11}}},{"id":"245","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":42,"line":11},"start":{"column":29,"line":11}}},{"id":"246","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":51,"line":12},"start":{"column":3,"line":12}}},{"id":"247","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":12},"start":{"column":15,"line":12}}},{"id":"248","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":35,"line":12},"start":{"column":29,"line":12}}},{"id":"249","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":61,"line":13},"start":{"column":3,"line":13}}},{"id":"250","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":13},"start":{"column":15,"line":13}}},{"id":"251","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":40,"line":13},"start":{"column":29,"line":13}}},{"id":"252","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":14},"start":{"column":3,"line":14}}},{"id":"253","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":14},"start":{"column":15,"line":14}}},{"id":"254","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":32,"line":14},"start":{"column":29,"line":14}}},{"id":"255","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":47,"line":15},"start":{"column":3,"line":15}}},{"id":"256","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":15},"start":{"column":15,"line":15}}},{"id":"257","mutatorName":"StringLiteral","replacement":"``","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":15},"start":{"column":29,"line":15}}},{"id":"258","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":45,"line":15},"start":{"column":43,"line":15}}},{"id":"259","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":46,"line":16},"start":{"column":4,"line":16}}},{"id":"260","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["20","21","22","23","24","25","26","27","28","29","30"],"location":{"end":{"column":2,"line":18},"start":{"column":74,"line":16}}}],"source":"import { expect, test } from 'vitest'\nimport { isObjectLike } from '../isObjectLike'\n\ntest.each([\n  { expected: true, label: '{}', tested: {} },\n  { expected: false, label: '/d+/gu', tested: /d+/gu },\n  { expected: false, label: 'new Date()', tested: new Date() },\n  { expected: false, label: '[]', tested: [] },\n  { expected: false, label: `Symbol('')`, tested: Symbol('') },\n  { expected: false, label: '() => {}', tested: () => {} },\n  { expected: false, label: 'tested() {}', tested() {} },\n  { expected: false, label: 'null', tested: null },\n  { expected: false, label: 'undefined', tested: undefined },\n  { expected: false, label: '1', tested: 1 },\n  { expected: false, label: `''`, tested: '' },\n])('isObjectLike($label) should be $expected', ({ tested, expected }) => {\n  expect(isObjectLike(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isString.test.ts":{"language":"typescript","mutants":[{"id":"261","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":4,"line":10},"start":{"column":11,"line":4}}},{"id":"262","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":15,"line":5},"start":{"column":5,"line":5}}},{"id":"263","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":8,"line":5},"start":{"column":6,"line":5}}},{"id":"264","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":14,"line":5},"start":{"column":10,"line":5}}},{"id":"265","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":18,"line":6},"start":{"column":5,"line":6}}},{"id":"266","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":17,"line":6},"start":{"column":12,"line":6}}},{"id":"267","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":23,"line":7},"start":{"column":5,"line":7}}},{"id":"268","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":22,"line":7},"start":{"column":17,"line":7}}},{"id":"269","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":15,"line":8},"start":{"column":5,"line":8}}},{"id":"270","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":14,"line":8},"start":{"column":9,"line":8}}},{"id":"271","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":16,"line":9},"start":{"column":5,"line":9}}},{"id":"272","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":15,"line":9},"start":{"column":10,"line":9}}},{"id":"273","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":10},"start":{"column":6,"line":10}}},{"id":"274","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["76","77","78","79","80"],"location":{"end":{"column":4,"line":12},"start":{"column":54,"line":10}}}],"source":"import { expect, test } from \"vitest\";\nimport {isString} from '../isString'\n\ntest.each([\n    ['', true],\n    [null, false],\n    [undefined, false],\n    [1, false],\n    [{}, false],\n  ])('isString(%j) should be %j', (arg, expected) => {\n    expect(isString(arg)).toBe(expected)\n  })\n  "},"src/misc/__tests__/eqId.test.ts":{"language":"typescript","mutants":[{"id":"275","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":13},"start":{"column":11,"line":4}}},{"id":"276","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":21,"line":5},"start":{"column":3,"line":5}}},{"id":"277","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":8,"line":5},"start":{"column":4,"line":5}}},{"id":"278","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":14,"line":5},"start":{"column":10,"line":5}}},{"id":"279","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":5},"start":{"column":16,"line":5}}},{"id":"280","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":6},"start":{"column":3,"line":6}}},{"id":"281","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":12,"line":6},"start":{"column":8,"line":6}}},{"id":"282","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":18,"line":6},"start":{"column":14,"line":6}}},{"id":"283","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":19,"line":7},"start":{"column":3,"line":7}}},{"id":"284","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":8,"line":7},"start":{"column":4,"line":7}}},{"id":"285","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":18,"line":7},"start":{"column":14,"line":7}}},{"id":"286","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":17,"line":8},"start":{"column":3,"line":8}}},{"id":"287","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":16,"line":8},"start":{"column":12,"line":8}}},{"id":"288","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":21,"line":9},"start":{"column":3,"line":9}}},{"id":"289","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":9},"start":{"column":16,"line":9}}},{"id":"290","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":31,"line":10},"start":{"column":3,"line":10}}},{"id":"291","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":30,"line":10},"start":{"column":26,"line":10}}},{"id":"292","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":22,"line":11},"start":{"column":3,"line":11}}},{"id":"293","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":8,"line":11},"start":{"column":4,"line":11}}},{"id":"294","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":14,"line":11},"start":{"column":10,"line":11}}},{"id":"295","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":21,"line":11},"start":{"column":16,"line":11}}},{"id":"296","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":18,"line":12},"start":{"column":3,"line":12}}},{"id":"297","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":17,"line":12},"start":{"column":12,"line":12}}},{"id":"298","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":31,"line":13},"start":{"column":4,"line":13}}},{"id":"299","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":8,"coveredBy":["63","64","65","66","67","68","69","70"],"location":{"end":{"column":2,"line":15},"start":{"column":53,"line":13}}}],"source":"import { expect, test } from 'vitest'\nimport { eqId } from '../eqId'\n\ntest.each([\n  ['11', '11', true],\n  [11, '11', true],\n  ['11', 11, true],\n  [11, 11, true],\n  [null, null, true],\n  [undefined, undefined, true],\n  ['11', '12', false],\n  [11, 12, false]\n])('eqId(%j, %j) should be %j', (a, b, expected) => {\n  expect(eqId(a, b)).toBe(expected)\n})\n"},"src/string/__tests__/capitalize.test.ts":{"language":"typescript","mutants":[{"id":"300","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":7},"start":{"column":11,"line":4}}},{"id":"301","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":29,"line":5},"start":{"column":3,"line":5}}},{"id":"302","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":15,"line":5},"start":{"column":4,"line":5}}},{"id":"303","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":28,"line":5},"start":{"column":17,"line":5}}},{"id":"304","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":6},"start":{"column":3,"line":6}}},{"id":"305","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":6},"start":{"column":4,"line":6}}},{"id":"306","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":38,"line":6},"start":{"column":22,"line":6}}},{"id":"307","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":33,"line":7},"start":{"column":4,"line":7}}},{"id":"308","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["82","83"],"location":{"end":{"column":2,"line":9},"start":{"column":54,"line":7}}}],"source":"import { expect, test } from 'vitest'\nimport { capitalize } from '../capitalize'\n\ntest.each([\n  ['coca cola', 'Coca cola'],\n  ['coca Del polar', 'Coca del polar'],\n])('capitalize(%j) should be %j', (arg, expected) => {\n  expect(capitalize(arg)).toBe(expected)\n})\n"},"src/string/__tests__/equalsIgnoreCase.test.ts":{"language":"typescript","mutants":[{"id":"309","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":28,"line":4},"start":{"column":10,"line":4}}},{"id":"310","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":26},"start":{"column":36,"line":4}}},{"id":"311","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":52,"line":5},"start":{"column":6,"line":5}}},{"id":"316","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":55,"line":9},"start":{"column":6,"line":9}}},{"id":"321","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":63,"line":13},"start":{"column":6,"line":13}}},{"id":"326","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":63,"line":17},"start":{"column":6,"line":17}}},{"id":"330","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":64,"line":22},"start":{"column":6,"line":22}}},{"id":"312","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["46"],"location":{"end":{"column":4,"line":7},"start":{"column":60,"line":5}}},{"id":"313","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["46"],"coveredBy":["46"],"location":{"end":{"column":34,"line":6},"start":{"column":29,"line":6}}},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["46"],"coveredBy":["46"],"location":{"end":{"column":41,"line":6},"start":{"column":36,"line":6}}},{"id":"318","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47"],"location":{"end":{"column":34,"line":10},"start":{"column":29,"line":10}}},{"id":"315","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["46"],"coveredBy":["46"],"location":{"end":{"column":53,"line":6},"start":{"column":49,"line":6}}},{"id":"319","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47"],"location":{"end":{"column":41,"line":10},"start":{"column":36,"line":10}}},{"id":"320","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["47"],"coveredBy":["47"],"location":{"end":{"column":53,"line":10},"start":{"column":49,"line":10}}},{"id":"317","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["47"],"location":{"end":{"column":4,"line":11},"start":{"column":63,"line":9}}},{"id":"322","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["48"],"location":{"end":{"column":4,"line":15},"start":{"column":71,"line":13}}},{"id":"323","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["48"],"location":{"end":{"column":34,"line":14},"start":{"column":29,"line":14}}},{"id":"324","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["48"],"location":{"end":{"column":42,"line":14},"start":{"column":36,"line":14}}},{"id":"325","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["48"],"coveredBy":["48"],"location":{"end":{"column":55,"line":14},"start":{"column":50,"line":14}}},{"id":"327","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["49"],"location":{"end":{"column":4,"line":20},"start":{"column":71,"line":17}}},{"id":"328","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["49"],"location":{"end":{"column":37,"line":19},"start":{"column":32,"line":19}}},{"id":"331","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["50"],"location":{"end":{"column":4,"line":25},"start":{"column":72,"line":22}}},{"id":"329","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["49"],"coveredBy":["49"],"location":{"end":{"column":50,"line":19},"start":{"column":45,"line":19}}},{"id":"332","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["50"],"location":{"end":{"column":34,"line":24},"start":{"column":29,"line":24}}},{"id":"333","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50"],"location":{"end":{"column":50,"line":24},"start":{"column":45,"line":24}}}],"source":"import { describe, expect, it } from 'vitest'\nimport { equalsIgnoreCase } from '../equalsIgnoreCase'\n\ndescribe('equalsIgnoreCase', () => {\n  it('should return `true` when strings are equals', () => {\n    expect(equalsIgnoreCase('foo', 'FoO')).toBe(true)\n  })\n\n  it('should return `true` when strings are identical', () => {\n    expect(equalsIgnoreCase('foo', 'foo')).toBe(true)\n  })\n\n  it('should return `false` when strings contains whitespaces', () => {\n    expect(equalsIgnoreCase('foo', 'foo ')).toBe(false)\n  })\n\n  it('should return `false` if the first arg is not an string', () => {\n    // @ts-expect-error - we are testing the case where the first arg is not a string\n    expect(equalsIgnoreCase(1, 'FoO')).toBe(false)\n  })\n\n  it('should return `false` if the second arg is not an string', () => {\n    // @ts-expect-error - we are testing the case where the second arg is not a string\n    expect(equalsIgnoreCase('FoO', 1)).toBe(false)\n  })\n})\n"},"src/string/__tests__/includes.test.ts":{"language":"typescript","mutants":[{"id":"334","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":20,"line":4},"start":{"column":10,"line":4}}},{"id":"335","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":2,"line":27},"start":{"column":28,"line":4}}},{"id":"336","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":69,"line":5},"start":{"column":6,"line":5}}},{"id":"341","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":78,"line":9},"start":{"column":6,"line":9}}},{"id":"346","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":58,"line":13},"start":{"column":6,"line":13}}},{"id":"350","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":53,"line":18},"start":{"column":6,"line":18}}},{"id":"354","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":62,"line":23},"start":{"column":6,"line":23}}},{"id":"337","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["51"],"location":{"end":{"column":4,"line":7},"start":{"column":77,"line":5}}},{"id":"338","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["51"],"coveredBy":["51"],"location":{"end":{"column":28,"line":6},"start":{"column":21,"line":6}}},{"id":"339","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["51"],"location":{"end":{"column":35,"line":6},"start":{"column":30,"line":6}}},{"id":"340","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["51"],"coveredBy":["51"],"location":{"end":{"column":47,"line":6},"start":{"column":43,"line":6}}},{"id":"343","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["52"],"location":{"end":{"column":28,"line":10},"start":{"column":21,"line":10}}},{"id":"342","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["52"],"location":{"end":{"column":4,"line":11},"start":{"column":86,"line":9}}},{"id":"347","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["53"],"location":{"end":{"column":4,"line":16},"start":{"column":66,"line":13}}},{"id":"345","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["52"],"coveredBy":["52"],"location":{"end":{"column":48,"line":10},"start":{"column":43,"line":10}}},{"id":"344","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["52"],"coveredBy":["52"],"location":{"end":{"column":35,"line":10},"start":{"column":30,"line":10}}},{"id":"348","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["53"],"location":{"end":{"column":37,"line":15},"start":{"column":32,"line":15}}},{"id":"352","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["54"],"location":{"end":{"column":32,"line":20},"start":{"column":27,"line":20}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["54"],"location":{"end":{"column":4,"line":21},"start":{"column":61,"line":18}}},{"id":"349","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["53"],"coveredBy":["53"],"location":{"end":{"column":50,"line":15},"start":{"column":45,"line":15}}},{"id":"353","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["54"],"coveredBy":["54"],"location":{"end":{"column":45,"line":20},"start":{"column":40,"line":20}}},{"id":"356","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":31,"line":25},"start":{"column":26,"line":25}}},{"id":"355","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["55"],"location":{"end":{"column":4,"line":26},"start":{"column":70,"line":23}}},{"id":"357","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["55"],"coveredBy":["55"],"location":{"end":{"column":44,"line":25},"start":{"column":39,"line":25}}}],"source":"import { describe, expect, it } from 'vitest'\nimport { includes } from '../includes'\n\ndescribe('includes', () => {\n  it('should return true if the string contains the given substring', () => {\n    expect(includes('hello', 'ell')).toBe(true)\n  })\n\n  it('should return false if the string does not contain the given substring', () => {\n    expect(includes('hello', 'all')).toBe(false)\n  })\n\n  it('should return false if first argument is undefined', () => {\n    // @ts-expect-error - we want to test this\n    expect(includes(undefined, 'all')).toBe(false)\n  })\n\n  it('should return false if first argument is null', () => {\n    // @ts-expect-error - we want to test this\n    expect(includes(null, 'all')).toBe(false)\n  })\n\n  it('should return false if first argument is not as string', () => {\n    // @ts-expect-error - we want to test this\n    expect(includes(111, 'all')).toBe(false)\n  })\n})\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"src/array/__tests__/getIndexById.test.ts":{"tests":[{"id":"0","name":"getIndexById should return the index of the item with the given id"},{"id":"1","name":"getIndexById should return -1 if the id is not found"},{"id":"2","name":"getIndexById should return -1 if the id is not found and some element is nil"},{"id":"3","name":"getIndexById should return -1 if the dataSource is empty"},{"id":"4","name":"getIndexById should return -1 if the dataSource is undefined"},{"id":"5","name":"getIndexById should return -1 if the dataSource is null"}],"source":"import { describe, expect, it } from 'vitest'\nimport { getIndexById } from '../getIndexById'\n\ndescribe('getIndexById', () => {\n  it('should return the index of the item with the given id', () => {\n    const actual = getIndexById([{ id: '1' }, { id: '2' }], '2')\n    expect(actual).toBe(1)\n  })\n\n  it('should return -1 if the id is not found', () => {\n    const actual = getIndexById([{ id: '1' }, { id: '2' }], '3')\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the id is not found and some element is nil', () => {\n    const actual = getIndexById(\n      // @ts-expect-error - we are testing the case where dataSource contains nil\n      [{ id: '1' }, { id: '2' }, null, undefined],\n      '3',\n    )\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the dataSource is empty', () => {\n    const actual = getIndexById([], '1')\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the dataSource is undefined', () => {\n    // @ts-expect-error - we are testing the case where dataSource is undefined\n    const actual = getIndexById(undefined, '1')\n    expect(actual).toBe(-1)\n  })\n\n  it('should return -1 if the dataSource is null', () => {\n    // @ts-expect-error - we are testing the case where dataSource is null\n    const actual = getIndexById(null, '1')\n    expect(actual).toBe(-1)\n  })\n})\n"},"src/check/__tests__/isEmpty.test.ts":{"tests":[{"id":"6","name":"isEmpty('{}') should be true"},{"id":"7","name":"isEmpty('[]') should be true"},{"id":"8","name":"isEmpty('null') should be true"},{"id":"9","name":"isEmpty('undefined') should be true"},{"id":"10","name":"isEmpty('\\'\\'') should be true"},{"id":"11","name":"isEmpty('0') should be true"},{"id":"12","name":"isEmpty('1') should be true"},{"id":"13","name":"isEmpty('() => {}') should be true"},{"id":"14","name":"isEmpty('tested() {}') should be true"},{"id":"15","name":"isEmpty('/d+/gu') should be true"},{"id":"16","name":"isEmpty('new Date()') should be true"},{"id":"17","name":"isEmpty('Symbol(\\'\\')') should be true"},{"id":"18","name":"isEmpty('[1, 2]') should be false"},{"id":"19","name":"isEmpty('{ foo: 1 }') should be false"}],"source":"import { expect, test } from 'vitest'\nimport { isEmpty } from '../isEmpty'\n\ntest.each([\n  { expected: true, label: '{}', tested: '{}' },\n  { expected: true, label: '[]', tested: '[]' },\n  { expected: true, label: 'null', tested: null },\n  { expected: true, label: 'undefined', tested: undefined },\n  { expected: true, label: `''`, tested: '' },\n  { expected: true, label: '0', tested: 0 },\n  { expected: true, label: '1', tested: 1 },\n  { expected: true, label: '() => {}', tested: () => {} },\n  { expected: true, label: 'tested() {}', tested() {} },\n  { expected: true, label: '/d+/gu', tested: /d+/gu },\n  { expected: true, label: 'new Date()', tested: new Date() },\n  { expected: true, label: `Symbol('')`, tested: Symbol('') },\n  { expected: false, label: `[1, 2]`, tested: [1, 2] },\n  { expected: false, label: `{ foo: 1 }`, tested: { foo: 1 } as unknown }\n])('isEmpty($label) should be $expected', ({ tested, expected }) => {\n  expect(isEmpty(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isObjectLike.test.ts":{"tests":[{"id":"20","name":"isObjectLike('{}') should be true"},{"id":"21","name":"isObjectLike('/d+/gu') should be false"},{"id":"22","name":"isObjectLike('new Date()') should be false"},{"id":"23","name":"isObjectLike('[]') should be false"},{"id":"24","name":"isObjectLike('Symbol(\\'\\')') should be false"},{"id":"25","name":"isObjectLike('() => {}') should be false"},{"id":"26","name":"isObjectLike('tested() {}') should be false"},{"id":"27","name":"isObjectLike('null') should be false"},{"id":"28","name":"isObjectLike('undefined') should be false"},{"id":"29","name":"isObjectLike('1') should be false"},{"id":"30","name":"isObjectLike('\\'\\'') should be false"}],"source":"import { expect, test } from 'vitest'\nimport { isObjectLike } from '../isObjectLike'\n\ntest.each([\n  { expected: true, label: '{}', tested: {} },\n  { expected: false, label: '/d+/gu', tested: /d+/gu },\n  { expected: false, label: 'new Date()', tested: new Date() },\n  { expected: false, label: '[]', tested: [] },\n  { expected: false, label: `Symbol('')`, tested: Symbol('') },\n  { expected: false, label: '() => {}', tested: () => {} },\n  { expected: false, label: 'tested() {}', tested() {} },\n  { expected: false, label: 'null', tested: null },\n  { expected: false, label: 'undefined', tested: undefined },\n  { expected: false, label: '1', tested: 1 },\n  { expected: false, label: `''`, tested: '' },\n])('isObjectLike($label) should be $expected', ({ tested, expected }) => {\n  expect(isObjectLike(tested)).toBe(expected)\n})\n"},"src/array/__tests__/getById.test.ts":{"tests":[{"id":"31","name":"getById should return the item with the given id"},{"id":"32","name":"getById should return undefined if the id is not found"},{"id":"33","name":"getById should return undefined if the dataSource is empty"},{"id":"34","name":"getById should return undefined if the dataSource is undefined"},{"id":"35","name":"getById should return undefined if the dataSource is null"}],"source":"import { describe, expect, it } from 'vitest'\nimport { getById } from '../getById'\n\ndescribe('getById', () => {\n  it('should return the item with the given id', () => {\n    const dataSource = [{ id: '1' }, { id: '2' }]\n    const actual = getById(dataSource, '2')\n    expect(actual).toStrictEqual({ id: '2' })\n  })\n\n  it('should return undefined if the id is not found', () => {\n    const dataSource = [{ id: '1' }, { id: '2' }]\n    expect(getById(dataSource, '3')).toBeUndefined()\n  })\n\n  it('should return undefined if the dataSource is empty', () => {\n    const dataSource = []\n    const actual = getById(dataSource, '1')\n    console.log('actual: ', actual )\n    expect(actual).toBe(undefined)\n  })\n\n  it('should return undefined if the dataSource is undefined', () => {\n    const dataSource = undefined\n    // @ts-expect-error - we are testing the case where dataSource is null\n\n    const actual = getById(dataSource, '1')\n    expect(actual).toBeUndefined()\n  })\n\n  it('should return undefined if the dataSource is null', () => {\n    const dataSource = null\n  })\n})\n"},"src/check/__tests__/IsObject.test.ts":{"tests":[{"id":"36","name":"isObject('{}') should be true"},{"id":"37","name":"isObject('[]') should be true"},{"id":"38","name":"isObject('/d+/gu') should be true"},{"id":"39","name":"isObject('new Date()') should be true"},{"id":"40","name":"isObject('Symbol(\\'\\')') should be false"},{"id":"41","name":"isObject('() => {}') should be false"},{"id":"42","name":"isObject('null') should be false"},{"id":"43","name":"isObject('undefined') should be false"},{"id":"44","name":"isObject('1') should be false"},{"id":"45","name":"isObject('\\'\\'') should be false"}],"source":"import { expect, test } from 'vitest'\nimport { isObject } from '../isObject'\n\ntest.each([\n  { expected: true, label: '{}', tested: {} },\n  { expected: true, label: '[]', tested: [] },\n  { expected: true, label: '/d+/gu', tested: /d+/gu },\n  { expected: true, label: 'new Date()', tested: new Date() },\n  { expected: false, label: `Symbol('')`, tested: Symbol('') },\n  { expected: false, label: '() => {}', tested: () => {} },\n  { expected: false, label: 'null', tested: null },\n  { expected: false, label: 'undefined', tested: undefined },\n  { expected: false, label: '1', tested: 1 },\n  { expected: false, label: `''`, tested: '' },\n])('isObject($label) should be $expected', ({ tested, expected }) => {\n  expect(isObject(tested)).toBe(expected)\n})\n"},"src/string/__tests__/equalsIgnoreCase.test.ts":{"tests":[{"id":"46","name":"equalsIgnoreCase should return `true` when strings are equals"},{"id":"47","name":"equalsIgnoreCase should return `true` when strings are identical"},{"id":"48","name":"equalsIgnoreCase should return `false` when strings contains whitespaces"},{"id":"49","name":"equalsIgnoreCase should return `false` if the first arg is not an string"},{"id":"50","name":"equalsIgnoreCase should return `false` if the second arg is not an string"}],"source":"import { describe, expect, it } from 'vitest'\nimport { equalsIgnoreCase } from '../equalsIgnoreCase'\n\ndescribe('equalsIgnoreCase', () => {\n  it('should return `true` when strings are equals', () => {\n    expect(equalsIgnoreCase('foo', 'FoO')).toBe(true)\n  })\n\n  it('should return `true` when strings are identical', () => {\n    expect(equalsIgnoreCase('foo', 'foo')).toBe(true)\n  })\n\n  it('should return `false` when strings contains whitespaces', () => {\n    expect(equalsIgnoreCase('foo', 'foo ')).toBe(false)\n  })\n\n  it('should return `false` if the first arg is not an string', () => {\n    // @ts-expect-error - we are testing the case where the first arg is not a string\n    expect(equalsIgnoreCase(1, 'FoO')).toBe(false)\n  })\n\n  it('should return `false` if the second arg is not an string', () => {\n    // @ts-expect-error - we are testing the case where the second arg is not a string\n    expect(equalsIgnoreCase('FoO', 1)).toBe(false)\n  })\n})\n"},"src/string/__tests__/includes.test.ts":{"tests":[{"id":"51","name":"includes should return true if the string contains the given substring"},{"id":"52","name":"includes should return false if the string does not contain the given substring"},{"id":"53","name":"includes should return false if first argument is undefined"},{"id":"54","name":"includes should return false if first argument is null"},{"id":"55","name":"includes should return false if first argument is not as string"}],"source":"import { describe, expect, it } from 'vitest'\nimport { includes } from '../includes'\n\ndescribe('includes', () => {\n  it('should return true if the string contains the given substring', () => {\n    expect(includes('hello', 'ell')).toBe(true)\n  })\n\n  it('should return false if the string does not contain the given substring', () => {\n    expect(includes('hello', 'all')).toBe(false)\n  })\n\n  it('should return false if first argument is undefined', () => {\n    // @ts-expect-error - we want to test this\n    expect(includes(undefined, 'all')).toBe(false)\n  })\n\n  it('should return false if first argument is null', () => {\n    // @ts-expect-error - we want to test this\n    expect(includes(null, 'all')).toBe(false)\n  })\n\n  it('should return false if first argument is not as string', () => {\n    // @ts-expect-error - we want to test this\n    expect(includes(111, 'all')).toBe(false)\n  })\n})\n"},"src/check/__tests__/isNullOrUndefined.test.ts":{"tests":[{"id":"56","name":"isNullOrUndefined('{}') should be false"},{"id":"57","name":"isNullOrUndefined('[]') should be false"},{"id":"58","name":"isNullOrUndefined('true') should be false"},{"id":"59","name":"isNullOrUndefined('false') should be false"},{"id":"60","name":"isNullOrUndefined('1') should be false"},{"id":"61","name":"isNullOrUndefined('null') should be true"},{"id":"62","name":"isNullOrUndefined('undefined') should be true"}],"source":"import { expect, test } from 'vitest'\nimport { isNullOrUndefined } from '../isNullOrUndefined'\n\ntest.each([\n  { expected: false, label: '{}', tested: {} },\n  { expected: false, label: '[]', tested: [] },\n  { expected: false, label: 'true', tested: true },\n  { expected: false, label: 'false', tested: false },\n  { expected: false, label: '1', tested: 1 },\n  { expected: true, label: 'null', tested: null },\n  { expected: true, label: 'undefined', tested: undefined },\n])('isNullOrUndefined($label) should be $expected', ({ tested, expected }) => {\n  expect(isNullOrUndefined(tested)).toBe(expected)\n})\n"},"src/misc/__tests__/eqId.test.ts":{"tests":[{"id":"63","name":"eqId(\"11\", \"11\") should be true"},{"id":"64","name":"eqId(11, \"11\") should be true"},{"id":"65","name":"eqId(\"11\", 11) should be true"},{"id":"66","name":"eqId(11, 11) should be true"},{"id":"67","name":"eqId(null, null) should be true"},{"id":"68","name":"eqId(undefined, undefined) should be true"},{"id":"69","name":"eqId(\"11\", \"12\") should be false"},{"id":"70","name":"eqId(11, 12) should be false"}],"source":"import { expect, test } from 'vitest'\nimport { eqId } from '../eqId'\n\ntest.each([\n  ['11', '11', true],\n  [11, '11', true],\n  ['11', 11, true],\n  [11, 11, true],\n  [null, null, true],\n  [undefined, undefined, true],\n  ['11', '12', false],\n  [11, 12, false]\n])('eqId(%j, %j) should be %j', (a, b, expected) => {\n  expect(eqId(a, b)).toBe(expected)\n})\n"},"src/array/__tests__/arraylable.test.ts":{"tests":[{"id":"71","name":"arraylable Empty test"},{"id":"72","name":"arraylable Should be empty [] when imput is null"},{"id":"73","name":"arraylable should be empty when imput is an empty object"}],"source":"import { expect,  describe, test } from 'vitest'\nimport { arraylable } from '../arraylable'\n\ndescribe('arraylable', () => {\n  test('Empty test', () => {})\n  test('Should be empty [] when imput is null', () => {\n    expect(arraylable(null)).toStrictEqual([])\n  })\n  test('should be empty when imput is an empty object', () => {\n    // @ts-expect-error - we are testing this\n    expect(arraylable({})).toStrictEqual([])\n  })\n})\n/*\ntest.each([\n  { expected: [], label: 'null', tested: null },\n  { expected: [], label: 'undefined', tested: undefined },\n  { expected: [1, 2, 3], label: '[1, 2, 3]', tested: [1, 2, 3] },\n  { expected: [], label: '{ foo: 1 }', tested: { foo: 1 } }\n])('arraylable($label) should be $expected', ({ tested, expected }) => {\n  // @ts-expect-error - we are testing the case where dataSource is invalid\n  expect(arraylable(tested)).toStrictEqual(expected)\n})\n */\n"},"src/check/__tests__/isFunction.test.ts":{"tests":[{"id":"74","name":"isFunction(${label) should be true"},{"id":"75","name":"isFunction(${label) should be false"}],"source":"import { expect, test } from 'vitest'\nimport { isFunction } from '../isFunction'\n\ntest.each([\n  { expected: true, label: ' () => {}', tested: () => {} },\n  { expected: false, label: '\"\"', tested: '' },\n  { expected: false, label: 2, tested: 2 },\n  { expected: false, label: '{}', tested: {} },\n])('isFunction(${label) should be $expected', ({ tested, expected }) => {\n  expect(isFunction(tested)).toBe(expected)\n})\n"},"src/check/__tests__/isString.test.ts":{"tests":[{"id":"76","name":"isString(\"\") should be true"},{"id":"77","name":"isString(null) should be false"},{"id":"78","name":"isString(undefined) should be false"},{"id":"79","name":"isString(1) should be false"},{"id":"80","name":"isString({}) should be false"}],"source":"import { expect, test } from \"vitest\";\nimport {isString} from '../isString'\n\ntest.each([\n    ['', true],\n    [null, false],\n    [undefined, false],\n    [1, false],\n    [{}, false],\n  ])('isString(%j) should be %j', (arg, expected) => {\n    expect(isString(arg)).toBe(expected)\n  })\n  "},"src/array/__tests__/sumBy.test.ts":{"tests":[{"id":"81","name":"sumBy should sum every single item by the given accesor"}],"source":"import { describe, expect, it } from 'vitest'\nimport { sumBy } from '../sumBy'\n\ndescribe('sumBy', () => {\n  it('should sum every single item by the given accesor', () => {\n    const actual = sumBy(\n      [{ value: 1 }, { value: 2 }, { value: 3 }],\n      (item) => item.value\n    )\n    expect(actual).toBe(6)\n  })\n})\n"},"src/string/__tests__/capitalize.test.ts":{"tests":[{"id":"82","name":"capitalize(\"coca cola\") should be \"Coca cola\""},{"id":"83","name":"capitalize(\"coca Del polar\") should be \"Coca del polar\""}],"source":"import { expect, test } from 'vitest'\nimport { capitalize } from '../capitalize'\n\ntest.each([\n  ['coca cola', 'Coca cola'],\n  ['coca Del polar', 'Coca del polar'],\n])('capitalize(%j) should be %j', (arg, expected) => {\n  expect(capitalize(arg)).toBe(expected)\n})\n"},"src/array/__tests__/sum.test.ts":{"tests":[{"id":"84","name":"sumBy should sum every single item"}],"source":"import { describe, expect, it } from 'vitest'\nimport { sum } from '../sum'\n\ndescribe('sumBy', () => {\n  it('should sum every single item', () => {\n    const actual = sum([1, 2, 3])\n    expect(actual).toBe(6)\n  })\n})\n"}},"projectRoot":"/Users/franco.dileo/Desktop/elite-web-developer-course/04-bis-javascript-utils","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.","packageManager":"yarn","reporters":["html","clear-text","progress","json"],"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"ignoreStatic":true,"mutate":["src/**/__tests__/**"],"testRunner":"vitest","testRunner_comment":"Take a look at (missing 'homepage' URL in package.json) for information about the vitest plugin.","coverageAnalysis":"perTest","buildCommand":"yarn build","symlinkNodeModules":false,"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"disableTypeChecks":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.3","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"typescript":"5.3.3"}}}